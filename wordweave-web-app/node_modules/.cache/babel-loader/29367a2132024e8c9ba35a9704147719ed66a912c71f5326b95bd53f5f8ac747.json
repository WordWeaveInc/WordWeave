{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lidya\\\\Desktop\\\\WordWeave\\\\wordweave-web-app\\\\src\\\\components\\\\Grid.js\";\nimport React from \"react\";\nimport \"../styles/GridComp.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GridComp = ({\n  words,\n  selectedWords,\n  onWordClick,\n  correctGuesses\n}) => {\n  const handleClick = (row, col, word) => {\n    onWordClick(word);\n  };\n  const availableWords = words.filter(word => {\n    const guessWords = correctGuesses.reduce((prev, correctGuess) => [...prev, ...correctGuess], []);\n    return !guessWords.includes(word);\n  });\n  function getCell(row, col, word, state) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `grid-cell ${state}`,\n      onClick: state !== \"guessed\" ? () => handleClick(row, col, word) : undefined,\n      children: word || `${row},${col}`\n    }, `${row}-${col}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n  const renderGrid = () => {\n    const grid = [];\n    grid.push(correctGuesses.map((guess, row) => {\n      const cols = guess.map((word, col) => {\n        return getCell(row, col, word, \"guessed\");\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: cols\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this);\n    }));\n    const remainingWords = availableWords.reduce((prev, word) => {\n      if (prev.length && prev[prev.length - 1].length < 4) {\n        prev[prev.length - 1].push(word);\n        return prev;\n      }\n      return [...prev, [word]];\n    }, []);\n    grid.push(remainingWords.map((section, row) => {\n      const cols = section.map((word, col) => {\n        const isSelected = selectedWords.includes(word);\n        return getCell(row + correctGuesses.length, col, word, isSelected ? \"selected\" : \"\");\n      });\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        children: cols\n      }, row, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this);\n    }));\n    return grid;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: renderGrid()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_c = GridComp;\nexport default GridComp;\nvar _c;\n$RefreshReg$(_c, \"GridComp\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","GridComp","words","selectedWords","onWordClick","correctGuesses","handleClick","row","col","word","availableWords","filter","guessWords","reduce","prev","correctGuess","includes","getCell","state","className","onClick","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","renderGrid","grid","push","map","guess","cols","remainingWords","length","section","isSelected","_c","$RefreshReg$"],"sources":["C:/Users/lidya/Desktop/WordWeave/wordweave-web-app/src/components/Grid.js"],"sourcesContent":["import React from \"react\";\r\nimport \"../styles/GridComp.css\";\r\n\r\nconst GridComp = ({ words, selectedWords, onWordClick, correctGuesses}) => {\r\n  const handleClick = (row, col, word) => {\r\n    onWordClick(word);\r\n  };\r\n\r\n  const availableWords = words.filter(word => {\r\n    const guessWords = correctGuesses.reduce((prev, correctGuess) => ([...prev, ...correctGuess]), [])\r\n    return !guessWords.includes(word)\r\n  })\r\n\r\n  function getCell(row, col, word, state){\r\n    return (\r\n      <div\r\n        key={`${row}-${col}`}\r\n        className={`grid-cell ${state}`}\r\n        onClick={state !== \"guessed\" ? () => handleClick(row, col, word) : undefined}\r\n      >\r\n        {word || `${row},${col}`}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderGrid = () => {\r\n    const grid = [];\r\n    grid.push(correctGuesses.map((guess, row) => {\r\n      const cols = guess.map((word, col) => {\r\n        return getCell(row, col, word, \"guessed\")\r\n      })\r\n\r\n      return (\r\n        <div key={row} className=\"grid-row\">\r\n          {cols}\r\n        </div>\r\n      )\r\n    }))\r\n\r\n    const remainingWords = availableWords.reduce((prev, word) => {\r\n      if (prev.length && prev[prev.length-1].length < 4) {\r\n        prev[prev.length-1].push(word)\r\n        return prev \r\n      }\r\n      return [...prev, [word]]\r\n    }, [])\r\n\r\n    grid.push(remainingWords.map((section, row) => {\r\n      const cols = section.map((word, col) => {\r\n        const isSelected = selectedWords.includes(word);\r\n        return getCell(row+correctGuesses.length, col, word, isSelected ? \"selected\" : \"\")\r\n      })\r\n\r\n      return (\r\n        <div key={row} className=\"grid-row\">\r\n          {cols}\r\n        </div>\r\n      )\r\n    }))\r\n\r\n    return grid;\r\n  };\r\n\r\n  return <div className=\"grid-container\">{renderGrid()}</div>;\r\n};\r\n\r\nexport default GridComp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}